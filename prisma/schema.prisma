// This is your Prisma schema file for AMPLI CALÇADOS
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Modelo de usuário (estende o auth.users do Supabase)
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  avatar    String?
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  dateOfBirth DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  orders    Order[]
  wishlist  WishlistItem[]
  reviews   Review[]

  @@map("users")
}

// Enum para roles de usuário
enum UserRole {
  USER
  ADMIN
}

// Modelo de categoria de produtos
model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relacionamentos
  products Product[]

  @@map("categories")
}

// Modelo de produto
model Product {
  id              String   @id @default(cuid())
  name            String
  slug            String   @unique
  description     String?
  raw_description String?
  price           Float
  salePrice       Decimal? @db.Decimal(10, 2)
  images          String[] // URLs das imagens
  sizes           String[] // Tamanhos disponíveis
  colors          String[] // Cores disponíveis
  inStock         Boolean  @default(true)
  featured        Boolean  @default(false)
  categoryId      String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relacionamentos
  category        Category     @relation(fields: [categoryId], references: [id])
  orderItems      OrderItem[]
  wishlistItems   WishlistItem[]
  reviews         Review[]

  @@map("products")
}

// Modelo de pedido
model Order {
  id        String      @id @default(cuid())
  userId    String
  status    OrderStatus @default(PENDING)
  total     Decimal     @db.Decimal(10, 2)
  shipping  Decimal     @db.Decimal(10, 2)
  tax       Decimal     @db.Decimal(10, 2)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Relacionamentos
  user       User        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]

  @@map("orders")
}

// Modelo de item do pedido
model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  size      String?
  color     String?

  // Relacionamentos
  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

// Modelo de item da lista de desejos
model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  // Relacionamentos
  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])

  @@map("wishlist_items")
}

// Modelo de avaliação
model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])

  @@unique([userId, productId])

  @@map("reviews")
}

// Enum para status do pedido
enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}
