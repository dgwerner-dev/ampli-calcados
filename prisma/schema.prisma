generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               String         @id @default(cuid())
  email            String         @unique
  name             String?
  avatar           String?
  role             UserRole       @default(USER)
  isActive         Boolean        @default(true)
  dateOfBirth      DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  cpf              String?        @unique
  newsletter       Boolean        @default(false)
  phone            String?
  smsNotifications Boolean        @default(false)
  addresses        Address[]
  orders           Order[]
  payments         Payment[]
  reviews          Review[]
  wishlist         WishlistItem[]

  @@map("users")
}

model Category {
  id                 String             @id @default(cuid())
  name               String
  slug               String             @unique
  description        String?
  image              String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  products           Product[]
  shippingCategories ShippingCategory[]

  @@map("categories")
}

model Product {
  id               String            @id @default(cuid())
  code             String?
  name             String
  slug             String            @unique
  description      String?
  raw_description  String?
  price            Float
  salePrice        Decimal?          @db.Decimal(10, 2)
  images           String[]
  sizes            String[]
  colors           String[]
  inStock          Boolean           @default(true)
  isActive         Boolean           @default(true)
  featured         Boolean           @default(false)
  categoryId       String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  orderItems       OrderItem[]
  category         Category          @relation(fields: [categoryId], references: [id])
  reviews          Review[]
  shippingProducts ShippingProduct[]
  wishlistItems    WishlistItem[]

  @@map("products")
}

model Order {
  id         String      @id @default(cuid())
  userId     String
  couponId   String?
  status     OrderStatus @default(PENDING)
  total      Decimal     @db.Decimal(10, 2)
  shipping   Decimal     @db.Decimal(10, 2)
  tax        Decimal     @db.Decimal(10, 2)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  orderItems OrderItem[]
  coupon     Coupon?     @relation(fields: [couponId], references: [id])
  user       User        @relation(fields: [userId], references: [id])
  payments   Payment[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  size      String?
  color     String?
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, productId])
  @@map("wishlist_items")
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, productId])
  @@map("reviews")
}

model Coupon {
  id                  String       @id @default(cuid())
  name                String
  description         String?
  code                String       @unique
  discountType        DiscountType
  discountValue       Float?
  minOrderValue       Float?
  usageLimit          Int?
  usagePerCustomer    Int          @default(1)
  usedCount           Int          @default(0)
  validUntil          DateTime?
  isActive            Boolean      @default(true)
  productRestriction  String       @default("ALL_PRODUCTS")
  customerRestriction String       @default("ALL_CUSTOMERS")
  isAccumulative      Boolean      @default(false)
  applyToTotal        Boolean      @default(true)
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  orders              Order[]

  @@map("coupons")
}

model ShippingPromotion {
  id            String             @id @default(cuid())
  name          String
  description   String?
  minOrderValue Float
  freeShipping  Boolean            @default(true)
  discountValue Float              @default(0)
  validUntil    DateTime?
  isActive      Boolean            @default(true)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  categories    ShippingCategory[]
  products      ShippingProduct[]
  regions       ShippingRegion[]

  @@map("shipping_promotions")
}

model ShippingRegion {
  id                  String             @id @default(cuid())
  name                String
  minOrderValue       Float              @default(0)
  zipCodeStart        String?
  zipCodeEnd          String?
  isActive            Boolean            @default(true)
  shippingPromotionId String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  shippingPromotion   ShippingPromotion? @relation(fields: [shippingPromotionId], references: [id])

  @@map("shipping_regions")
}

model ShippingProduct {
  id                  String             @id @default(cuid())
  productId           String
  isActive            Boolean            @default(true)
  shippingPromotionId String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  product             Product            @relation(fields: [productId], references: [id])
  shippingPromotion   ShippingPromotion? @relation(fields: [shippingPromotionId], references: [id])

  @@unique([productId, shippingPromotionId])
  @@map("shipping_products")
}

model ShippingCategory {
  id                  String             @id @default(cuid())
  categoryId          String
  isActive            Boolean            @default(true)
  shippingPromotionId String?
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  category            Category           @relation(fields: [categoryId], references: [id])
  shippingPromotion   ShippingPromotion? @relation(fields: [shippingPromotionId], references: [id])

  @@unique([categoryId, shippingPromotionId])
  @@map("shipping_categories")
}

model Payment {
  id              String        @id @default(cuid())
  orderId         String
  userId          String
  pagBankOrderId  String
  pagBankChargeId String
  paymentMethod   PaymentMethod
  amount          Decimal       @db.Decimal(10, 2)
  status          PaymentStatus @default(PENDING)
  paymentData     Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  order           Order         @relation(fields: [orderId], references: [id])
  user            User          @relation(fields: [userId], references: [id])

  @@map("payments")
}

model Address {
  id           String   @id @default(cuid())
  userId       String
  name         String
  zipCode      String
  street       String
  number       String
  complement   String?
  neighborhood String
  city         String
  state        String
  isDefault    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@map("addresses")
}

model Settings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("settings")
}

enum UserRole {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SEPARATING
  AWAITING_SHIPMENT
  SHIPPED
  DELIVERED
  CANCELLED
}

enum DiscountType {
  PERCENTAGE
  FIXED
  FREE_SHIPPING
}

enum PaymentStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PIX
  BOLETO
  BANK_TRANSFER
}
